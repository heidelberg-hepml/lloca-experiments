selection: null
   ### use `&`, `|`, `~` for logical operations on numpy arrays
   ### can use functions from `math`, `np` (numpy), and `awkward` in the expression

new_variables:
   ### [format] name: formula
   ### can use functions from `math`, `np` (numpy), and `awkward` in the expression
   part_d0: np.tanh(part_d0val)
   part_dz: np.tanh(part_dzval)
   label_isQCD: 1-label
   label_isTop: label

inputs:
   pf_features:
      length: 128
      pad_mode: constant
      vars: 
      ### [format 1]: var_name (no transformation)
      ### [format 2]: [var_name, 
      ###              subtract_by(optional, default=None, no transf. if preprocess.method=manual, auto transf. if preprocess.method=auto), 
      ###              multiply_by(optional, default=1), 
      ###              clip_min(optional, default=-5), 
      ###              clip_max(optional, default=5), 
      ###              pad_value(optional, default=0)]
         - [part_d0, null]
         - [part_ErrD0, 0, 1, 0, 1]
         - [part_dz, null]
         - [part_ErrDZ, 0, 1, 0, 1]
 
   pf_vectors:
      length: 128
      pad_mode: constant
      vars: 
         - [part_energy, null]
         - [part_px, null]
         - [part_py, null]
         - [part_pz, null]

labels:
   ### type can be `simple`, `custom`
   ### [option 1] use `simple` for binary/multi-class classification, then `value` is a list of 0-1 labels
   type: simple
   value: [label_isQCD, label_isTop]
   ### [option 2] otherwise use `custom` to define the label, then `value` is a map
   # type: custom
   # value: 
   #    truth_label: label.argmax(1)

weights: 